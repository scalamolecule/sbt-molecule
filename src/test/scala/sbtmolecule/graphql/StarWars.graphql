enum Episode {
    NEWHOPE
    EMPIRE
    JEDI
}

interface Character {
    #    a1: Int
    #    a2: Int!
    #
    #    b1: Character
    #    b2: Character!
    #
    #    aa1: [Int]
    #    aa2: [Int]!
    ##    aa3: [Int!]
    ##    aa4: [Int!]!
    #
    #    bb1: [Character]
    #    bb2: [Character]!
    ##    bb3: [Character!]
    ##    bb4: [Character!]!

    id: ID!
    name: String!
    friends: [Character]
    appearsIn: [Episode]!
}

type Droid implements Character {
    id: ID!
    name: String!
    friends: [Character]
    appearsIn: [Episode]!
    primaryFunction: String
}

type Human implements Character {
    id: ID!
    name: String!
    friends: [Character]
    appearsIn: [Episode]!
    homePlanet: String
}

#schema {
#    query: QueryX
#}

#type QueryX {
type Query {
#    hero(episode: Episode!): Character
    hero: Character
#    character(id: ID!): Character
    human(id: ID!): Human
#    droid(id: ID!, date: Date): Droid
#    naked: Droid
}


type Review {
    text: String
}

input ReviewInput {
    stars: Int!
    commentary: String
}

scalar Date

type Mutation {
    createReview(episode: Episode, review: ReviewInput!, created: Date): Review
    updateHumanName(id: ID!, name: String!): Human
    deleteHuman(id: ID!): ID!
}

type Subscription {
    reviewCreated: Review
}