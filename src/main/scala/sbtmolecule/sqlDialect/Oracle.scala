package sbtmolecule.sqlDialect

import molecule.db.base.ast.{CardOne, MetaAttribute}

object Oracle extends Dialect {

  override def tpe(metaAttribute: MetaAttribute): String = {
    if (metaAttribute.attr == "id")
      "NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY"
    else metaAttribute.card match {
      case _: CardOne => metaAttribute.baseTpe match {
        case "ID"         => "BIGINT"
        case "String"     => "LONG VARCHAR"
        case "Int"        => "NUMBER(10)"
        case "Long"       => "NUMBER(19)"
        case "Float"      => "NUMBER(19, 4)"
        case "Double"     => "NUMBER(19, 4)"
        case "Boolean"    => "NUMBER(1)"
        case "BigInt"     => "NUMBER(38)"
        case "BigDecimal" => "NUMBER(38)"
        case "Date"       => "DATE"
        case "UUID"       => "STRING AS UUID"
        case "URI"        => "VARCHAR(512)"
        case "Byte"       => "NUMBER(3)"
        case "Short"      => "NUMBER(5)"
        case "Char"       => "CHAR(1)"
      }
      case _          => metaAttribute.baseTpe match {
        case "ID"         => "ARRAY(5) OF NUMBER(19)"
        case "String"     => "ARRAY(5) OF LONG VARCHAR"
        case "Int"        => "ARRAY(5) OF NUMBER(10)"
        case "Long"       => "ARRAY(5) OF NUMBER(19)"
        case "Float"      => "ARRAY(5) OF NUMBER(19, 4)"
        case "Double"     => "ARRAY(5) OF NUMBER(19, 4)"
        case "Boolean"    => "ARRAY(5) OF NUMBER(1)"
        case "BigInt"     => "ARRAY(5) OF NUMBER(38)"
        case "BigDecimal" => "ARRAY(5) OF NUMBER(38)"
        case "Date"       => "ARRAY(5) OF DATE"
        case "UUID"       => "ARRAY(5) OF STRING AS UUID"
        case "URI"        => "ARRAY(5) OF VARCHAR(512)"
        case "Byte"       => "ARRAY(5) OF NUMBER(3)"
        case "Short"      => "ARRAY(5) OF NUMBER(5)"
        case "Char"       => "ARRAY(5) OF CHAR(1)"
      }
    }
  }

  // https://www.postgresql.org/docs/current/sql-keywords-appendix.html
  override def reservedKeyWords: List[String] = List(
    "access",
    "add",
    "all",
    "alter",
    "and",
    "any",
    "as",
    "asc",
    "audit",
    "between",
    "by",
    "char",
    "check",
    "cluster",
    "column",
    "column_value",
    "comment",
    "compress",
    "connect",
    "create",
    "current",
    "date",
    "decimal",
    "default",
    "delete",
    "desc",
    "distinct",
    "drop",
    "else",
    "exclusive",
    "exists",
    "file",
    "float",
    "for",
    "from",
    "grant",
    "group",
    "having",
    "identified",
    "immediate",
    "in",
    "increment",
    "index",
    "initial",
    "insert",
    "integer",
    "intersect",
    "into",
    "is",
    "level",
    "like",
    "lock",
    "long",
    "maxextents",
    "minus",
    "mlslabel",
    "mode",
    "modify",
    "nested_table_id",
    "noaudit",
    "nocompress",
    "not",
    "nowait",
    "null",
    "number",
    "of",
    "offline",
    "on",
    "online",
    "option",
    "or",
    "order",
    "pctfree",
    "prior",
    "public",
    "raw",
    "rename",
    "resource",
    "revoke",
    "row",
    "rowid",
    "rownum",
    "rows",
    "select",
    "session",
    "set",
    "share",
    "size",
    "smallint",
    "start",
    "successful",
    "synonym",
    "sysdate",
    "table",
    "then",
    "to",
    "trigger",
    "uid",
    "union",
    "unique",
    "update",
    "user",
    "validate",
    "values",
    "varchar",
    "varchar2",
    "view",
    "whenever",
    "where",
    "with"
  )

}
